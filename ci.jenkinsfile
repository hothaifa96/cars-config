pipeline{
    agent any
    environment {
        DOCKER_IMAGE = 'hothaifaz11/cars_api'
        DOCKER_TAG = "${BUILD_NUMBER}"
        GIT_REPO = 'https://github.com/hothaifa96/cars-code.git'
        APP_DIR = 'cars-code'

    }
    stages{
        stage("Cloning the application"){
            steps{
                echo "Cloning the application"
                git branch: 'main', url: "${GIT_REPO}"
            }
            
        }
        stage("build docker image"){
            steps{
                echo "build docker image"
                sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ./backend/"
            }
            
        }
        stage("test application"){
            // agent{
            //     docker{
            //         image: "${DOCKER_IMAGE}:${DOCKER_TAG}"
            //         -v './backend/test/test.sh:/application'
            //     }
            // }
            steps{
                sh "docker run -d -p 3000:3000 --name hodi ${DOCKER_IMAGE}:${DOCKER_TAG}"
                echo "preparing the env"
                sh 'docker ps'
                sh 'chmod 777 ./backend/test/test.sh'
                sh './backend/test/test.sh all'
            }
            post{
                always{
                    sh 'docker rm -f hodi'
                }

            }
            
        }
        stage("push new image"){
            steps{
                echo "push new image"
                 try {
                        // Login to Docker Hub
                        withCredentials([usernamePassword(credentialsId: 'hodi-docker', 
                                                        usernameVariable: 'DOCKER_USERNAME', 
                                                        passwordVariable: 'DOCKER_PASSWORD')]) {
                            sh '''
                                echo "Logging into Docker Hub..."
                                echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                            '''
                        }
                        
                        // Push images
                        sh '''
                            echo "Pushing image: ${DOCKER_IMAGE}:${DOCKER_TAG}"
                            docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                            
                            echo "Pushing image: ${DOCKER_IMAGE}:latest"
                            docker push ${DOCKER_IMAGE}:latest
                            
                            echo "Successfully pushed images to Docker Hub"
                        '''
                        
                    } catch (Exception e) {
                        echo "Push failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("Docker push failed")
                    }
                
            }
            
        }
       
   }
}